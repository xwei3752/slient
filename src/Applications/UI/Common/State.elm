module UI.Common.State exposing (..)

import Browser.Dom
import Browser.Navigation as Nav
import Common exposing (..)
import ContextMenu exposing (ContextMenu)
import List.Extra as List
import Monocle.Lens as Lens exposing (Lens)
import Notifications exposing (Notification)
import Return exposing (return)
import Return.Ext as Return
import Task
import UI.Notifications
import UI.Page as Page exposing (Page)
import UI.Playlists.Directory
import UI.Tracks.Scene.List
import UI.Types as UI exposing (Manager, Msg)



-- ðŸ“£


changeUrlUsingPage : Page -> Manager
changeUrlUsingPage page model =
    page
        |> Page.toString
        |> Nav.pushUrl model.navKey
        |> return model


dismissNotification : { id : Int } -> Manager
dismissNotification options model =
    options
        |> UI.Notifications.dismiss model.notifications
        |> Return.map (\n -> { model | notifications = n })


forceTracksRerender : Manager
forceTracksRerender =
    Browser.Dom.setViewportOf UI.Tracks.Scene.List.containerId 0 1
        |> Task.attempt (always UI.Bypass)
        |> Return.communicate


generateDirectoryPlaylists : Manager
generateDirectoryPlaylists model =
    let
        nonDirectoryPlaylists =
            List.filterNot
                .autoGenerated
                model.playlists

        directoryPlaylists =
            UI.Playlists.Directory.generate
                model.sources
                model.tracks.untouched
    in
    [ nonDirectoryPlaylists
    , directoryPlaylists
    ]
        |> List.concat
        |> (\c -> { model | playlists = c })
        |> Return.singleton


showContextMenuWithModel : UI.Model -> ContextMenu Msg -> ( UI.Model, Cmd UI.Msg )
showContextMenuWithModel model contextMenu =
    Return.singleton { model | contextMenu = Just contextMenu }


showNotification : Notification Msg -> Manager
showNotification notification model =
    model.notifications
        |> UI.Notifications.show notification
        |> Return.map (\n -> { model | isLoading = False, notifications = n })


showNotificationWithModel : UI.Model -> Notification Msg -> ( UI.Model, Cmd UI.Msg )
showNotificationWithModel model notification =
    showNotification notification model


toggleLoadingScreen : Switch -> Manager
toggleLoadingScreen switch model =
    case switch of
        On ->
            Return.singleton { model | isLoading = True }

        Off ->
            Return.singleton { model | isLoading = False }



-- ðŸ› 


modifySingleton : Lens a b -> (b -> b) -> a -> ( a, Cmd msg )
modifySingleton lens modifier =
    Lens.modify lens modifier >> Return.singleton
